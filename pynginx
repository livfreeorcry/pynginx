#!/usr/bin/python
#a: James Burke
#e: jburke@quotemedia.com
from urllib2 import urlopen
from lookup import lookup
from cacti import cacti
import argparse
import datetime
import json



parser = argparse.ArgumentParser(description="Parse nginx json status page out to nagios and cacti")
parser.add_argument('command', metavar='C', type=str, nargs='*',
	help="""Command to specify which data you need. 
	Implemented:
		Cacti Index""")
parser.add_argument('-s','--secure', dest='secure', action='store_const',
	const='https://', default='http://', help='Flag https, defaults to http.')
parser.add_argument('-a','--address', dest='address', default='127.0.0.1',
	help='hostname or ip address for the nginx host. Defaults to localhost.')
parser.add_argument('-u','--url', dest='url', default='/status',
	help='uri path for the status page')
parser.add_argument('-t','--timeout', dest='timeout', default=10,
	help="Timeout for requests in seconds")
parser.add_argument('-e','--environment', dest='env', default=None,
	help="For environment specific shenanigans. dev, prod, nj.")
parser.add_argument('-v', '--verbose', dest='verbose', action='store_const',
	const=True, default=False)
#Put input into its proper places.
args = vars(parser.parse_args())
url="{0}{1}{2}".format(args['secure'], args['address'], args['url'])

#Simply prints out a few pieces of info as a simple test.
def state(blob):
	for upstream in statusJson["upstreams"]:
		for instance in statusJson["upstreams"][upstream]:
			state=instance["state"]
			downtime=str(datetime.timedelta( seconds = (instance["downtime"]/1000)))
			host=lookup(instance["server"], env)
			print " - ".join([host, state, downtime])

statusJson=json.loads(urlopen(url,timeout=args['timeout']).read())
command=args['command']
if command[0] == 'blob': print statusJson
elif command[0] == 'state': state(blob)
elif command[0] == 'cacti': cacti(statusJson, args['env'], command)
elif command[0] == 'nagios': print "NYI"
elif command[0] == None: print "no command \n"
else: print "Command not recognized: {0}".format(command[0])
