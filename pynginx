#!/usr/bin/python
#a: James Burke
#e: jburke@quotemedia.com
from urllib2 import urlopen
from lookup import Lookup
from cacti import cacti
import sys
import argparse
import datetime
import json

logfile="/var/tmp/pynginx.log"
with open(logfile, "a") as log:
	log.write("{0}\n".format(" ".join(sys.argv[:])))
parser = argparse.ArgumentParser(description="Parse nginx json status page out to nagios and cacti")
parser.add_argument('command', metavar='C', type=str, nargs='*',
	help="""Command to specify which data you need. 
	Implemented:
		Cacti Index""")
parser.add_argument('-s','--secure', dest='secure', action='store_const',
	const='https://', default='http://', help='Flag https, defaults to http.')
parser.add_argument('-a','--address', dest='add', default='127.0.0.1',
	help='hostname or ip address for the nginx host. Defaults to localhost.')
parser.add_argument('-u','--url', dest='url', default='/status',
	help='uri path for the status page')
parser.add_argument('-t','--timeout', dest='tout', default=10,
	help="Timeout for requests in seconds")
parser.add_argument('-e','--environment', dest='env', default=None,
	help="For environment specific shenanigans. dev, prod, nj.")
command=parser.parse_args().command
env=parser.parse_args().env
timeout=parser.parse_args().tout
url="{0}{1}{2}".format(
	parser.parse_args().secure,
	parser.parse_args().add,
	parser.parse_args().url)

names=Lookup("/var/tmp/names.json", env)
def state(blob):
	for upstream in statusJson["upstreams"]:
		for instance in statusJson["upstreams"][upstream]:
			state=instance["state"]
			downtime=str(datetime.timedelta( seconds = (instance["downtime"]/1000)))
			host=names.lookup(instance["server"])
			print " - ".join([host, state, downtime])
			with open(logfile, "a") as log:
				log.write(" - ".join([host, state, downtime]))
				log.write("/n")

def pblob(blob):
	print blob

statusJson=json.loads(urlopen(url,timeout=timeout).read())
""""""
if command[0] == 'blob': pblob(statusJson)
elif command[0] == 'state': state(blob)
elif command[0] == 'cacti': cacti(statusJson, names, command)
elif command[0] == 'nagios': 
	print "NYI"
	with open(logfile, "a") as log:
			log.write("Command {0} NYI\n".format(command[0]))
elif command[0] == None: print "no command \n"
else: 
	print "Command not recognized: {0}".format(command[0])
	with open(logfile, "a") as log:
			log.write("Command {0} Not Recognized\n".format(command[0]))
names.writeDNS()

